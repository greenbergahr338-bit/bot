import asyncio, os, csv, logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò (–≤—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä—è–º–æ —Ç—É—Ç) ===
BOT_TOKEN       = ""
MANAGER_CHAT_ID = 7491118216
CHANNEL_LINK    = "https://t.me/+lbkzPyb0O1BmZDQy"
REVIEWS_LINK    = "https://t.me/CardUPreviews"
MANAGER_LINK    = "https://t.me/cardupp"
SITE_LINK       = "https://cardupof.ru"
LOG_FILE        = "leads.csv"

if not BOT_TOKEN or BOT_TOKEN.startswith("–í–°–¢–ê–í–¨"):
    raise SystemExit("‚ùå BOT_TOKEN –ø—É—Å—Ç. –í—Å—Ç–∞–≤—å –µ–≥–æ –ø—Ä—è–º–æ –≤ bot.py –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("cardup-bot")

bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher()
r   = Router()
dp.include_router(r)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ===
class Lead(StatesGroup):
    flow = State()
    name = State()
    age  = State()
    tg   = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def kb_welcome():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_form")],
        [InlineKeyboardButton(text="üì£ –ö–∞–Ω–∞–ª", url=CHANNEL_LINK),
         InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)],
        [InlineKeyboardButton(text="üåê –°–∞–π—Ç", url=SITE_LINK)]
    ])

def kb_finish():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="‚≠ê –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)],
        [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=SITE_LINK)],
        [InlineKeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=MANAGER_LINK)],
    ])

# === –£—Ç–∏–ª–∏—Ç—ã ===
def clean(s: str) -> str: return (s or "").strip()

async def notify_manager(data: dict):
    if not MANAGER_CHAT_ID: return
    text = (
        "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{data.get('flow','-')}</code>\n"
        f"–ò–º—è: <b>{data.get('name','-')}</b>\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: <b>{data.get('age','-')}</b>\n"
        f"Telegram: <b>{data.get('tg','-')}</b>\n"
        f"User ID: <code>{data.get('user_id')}</code>\n"
        f"–î–∞—Ç–∞: <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>"
    )
    try:
        await bot.send_message(MANAGER_CHAT_ID, text)
    except Exception as e:
        log.exception("send to manager failed: %s", e)

def save_csv(data: dict):
    new_file = not os.path.exists(LOG_FILE)
    with open(LOG_FILE, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f, delimiter=";")
        if new_file: w.writerow(["dt","user_id","flow","name","age","tg"])
        w.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            data.get("user_id"), data.get("flow"),
            data.get("name"), data.get("age"), data.get("tg")
        ])

# === –°—Ç–∞—Ä—Ç ===
@r.message(CommandStart(deep_link=True))
async def start_deep(m: Message, state: FSMContext, command: CommandStart):
    payload = (command.args or "").lower().strip()
    flow = "card14" if payload == "card14" else ("card18" if payload == "card18" else "plain")
    await state.clear()
    await state.update_data(flow=flow, user_id=m.from_user.id)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –≠—Ç–æ CardUP.\n\n"
        "–ú—ã ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º. –ü–æ–º–æ–≥–∞–µ–º —à–∫–æ–ª—å–Ω–∏–∫–∞–º (—Å 14 –ª–µ—Ç) –∏ –≤–∑—Ä–æ—Å–ª—ã–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç –∏ –æ—Ñ—Ñ–µ—Ä–æ–≤.\n"
        "–í –∞–≤–≥—É—Å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –≤—ã–ø–ª–∞—á–µ–Ω–æ: <b>162 480 ‚ÇΩ</b> üí∏\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –∑–∞–ø–æ–ª–Ω—è–µ—à—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É,\n"
        "‚Ä¢ –ø–æ–ª—É—á–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É,\n"
        "‚Ä¢ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∫–æ–º ‚Äî –∑–∞–±–∏—Ä–∞–µ—à—å –≤—ã–ø–ª–∞—Ç—É.\n\n"
        "–ì–æ—Ç–æ–≤(-–∞) —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å? –ñ–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª.",
        reply_markup=kb_welcome()
    )

@r.message(CommandStart())
async def start_plain(m: Message, state: FSMContext):
    await state.clear()
    await state.update_data(flow="plain", user_id=m.from_user.id)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –≠—Ç–æ CardUP.\n\n"
        "–ú—ã ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º. –ü–æ–º–æ–≥–∞–µ–º —à–∫–æ–ª—å–Ω–∏–∫–∞–º (—Å 14 –ª–µ—Ç) –∏ –≤–∑—Ä–æ—Å–ª—ã–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç –∏ –æ—Ñ—Ñ–µ—Ä–æ–≤.\n"
        "–í –∞–≤–≥—É—Å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –≤—ã–ø–ª–∞—á–µ–Ω–æ: <b>162 480 ‚ÇΩ</b> üí∏\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –∑–∞–ø–æ–ª–Ω—è–µ—à—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É,\n"
        "‚Ä¢ –ø–æ–ª—É—á–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É,\n"
        "‚Ä¢ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∫–æ–º ‚Äî –∑–∞–±–∏—Ä–∞–µ—à—å –≤—ã–ø–ª–∞—Ç—É.\n\n"
        "–ì–æ—Ç–æ–≤(-–∞) —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å? –ñ–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª.",
        reply_markup=kb_welcome()
    )

# === –ê–Ω–∫–µ—Ç–∞ ===
@r.callback_query(F.data == "start_form")
async def start_form(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üôÇ\n(–Ω—É–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω)")
    await state.set_state(Lead.name)
    await cb.answer()

@r.message(Lead.name)
async def get_name(m: Message, state: FSMContext):
    name = clean(m.text)
    if len(name) < 2:
        await m.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è üëá")
        return
    await state.update_data(name=name)
    await m.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! üéâ\n–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–æ—Ç 14+)")
    await state.set_state(Lead.age)

@r.message(Lead.age)
async def get_age(m: Message, state: FSMContext):
    s = clean(m.text)
    if not s.isdigit():
        await m.answer("–í–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –°–∫–æ–ª—å–∫–æ –ª–µ—Ç? (14‚Äì99)")
        return
    age = int(s)
    if age < 14 or age > 99:
        await m.answer("–ü–æ–¥—Ö–æ–¥–∏—Ç 14‚Äì99. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üëá")
        return
    await state.update_data(age=age)
    suggested = f"@{m.from_user.username}" if getattr(m.from_user, "username", None) else "@username"
    await m.answer(
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ üôå\n"
        "–û—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram @username, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π.\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{suggested}</code>"
    )
    await state.set_state(Lead.tg)

@r.message(Lead.tg)
async def get_tg(m: Message, state: FSMContext):
    tg = clean(m.text)
    if not tg.startswith("@") or len(tg) < 3:
        await m.answer("–ù—É–∂–µ–Ω –Ω–∏–∫ —Å @ –≤ –Ω–∞—á–∞–ª–µ. –ü—Ä–∏–º–µ—Ä: @yourname")
        return
    await state.update_data(tg=tg)
    data = await state.get_data()

    payload = {
        "user_id": data.get("user_id"),
        "flow": data.get("flow","plain"),
        "name": data.get("name"),
        "age": data.get("age"),
        "tg": tg
    }
    await notify_manager(payload)
    save_csv(payload)

    await m.answer(
        "–ì–æ—Ç–æ–≤–æ üéâ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—é –∑–∞—è–≤–∫—É!\n\n"
        "üì£ –ß—Ç–æ–±—ã –±—ã—Ç—å –≤ —Ç–µ–º–µ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ—Ñ—Ñ–µ—Ä—ã:\n"
        f"‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à <a href='{CHANNEL_LINK}'>–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a> ‚Äî —Ç–∞–º —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã–ø–ª–∞—Ç—ã.\n"
        f"‚Ä¢ –ó–∞–≥–ª—è–Ω–∏ –≤ <a href='{REVIEWS_LINK}'>–∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏</a> ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–±—è—Ç.\n"
        f"‚Ä¢ –°–∞–π—Ç —Å —É—Å–ª–æ–≤–∏—è–º–∏: <a href='{SITE_LINK}'>{SITE_LINK}</a>",
        reply_markup=kb_finish()
    )
    await state.clear()

# === Help ===
@r.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer("–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning("delete_webhook: %s", e)
    try:
        if MANAGER_CHAT_ID:
            await bot.send_message(MANAGER_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except Exception as e:
        log.warning("send to admin failed: %s", e)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
